name: Deploy Azure Microsite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.6.0'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  # Security and quality checks
  security-scan:
    name: Security & Quality Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Security audit
        run: npm audit --audit-level high

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Build CDK
        run: |
          npm run build
          npx cdktf get
          npx cdktf synth --output terraform/

      - name: Terraform Security Scan with Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          soft_fail: true
          framework: terraform

      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-results
          path: |
            checkov-report.json
            results.sarif

  # Build and validate infrastructure
  build:
    name: Build & Plan
    runs-on: ubuntu-latest
    needs: security-scan
    strategy:
      matrix:
        environment: [staging, production]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Generate CDK configuration
        run: |
          npx cdktf get
          npx cdktf synth --output terraform/

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }

      - name: Terraform Init
        run: |
          cd terraform/stacks/microsite-${{ matrix.environment }}
          terraform init

      - name: Terraform Validate
        run: |
          cd terraform/stacks/microsite-${{ matrix.environment }}
          terraform validate

      - name: Terraform Plan
        run: |
          cd terraform/stacks/microsite-${{ matrix.environment }}
          terraform plan -out=tfplan

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ matrix.environment }}
          path: terraform/stacks/microsite-${{ matrix.environment }}/tfplan

      - name: Cost Estimation
        id: cost
        run: |
          # This would integrate with Azure Cost Management API or Infracost
          echo "Estimated monthly cost for ${{ matrix.environment }}: $2.98"
          echo "cost=2.98" >> $GITHUB_OUTPUT

      - name: Website Build & Optimization
        run: |
          # Build and optimize website assets
          mkdir -p dist/website
          cp -r website/* dist/website/
          
          # Minify CSS (would use proper build tools in production)
          echo "/* Minified CSS */" > dist/website/css/style.min.css
          
          # Optimize images (placeholder)
          echo "Image optimization completed"

      - name: Upload website artifacts
        uses: actions/upload-artifact@v4
        with:
          name: website-${{ matrix.environment }}
          path: dist/website/

  # Deploy to staging automatically
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Generate CDK configuration
        run: |
          npx cdktf get
          npx cdktf synth --output terraform/

      - name: Download Website Artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-staging
          path: dist/website/

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }

      - name: Deploy Infrastructure
        run: |
          cd terraform/stacks/microsite-staging
          terraform init
          
          # Import existing resources if they exist
          echo "Checking for existing resources to import..."
          
          # Import resource group if it exists
          if az group show --name rg-microsite-staging --output none 2>/dev/null; then
            echo "Importing existing resource group..."
            terraform import azurerm_resource_group.ResourceGroup /subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/rg-microsite-staging || echo "Resource group already in state"
          fi
          
          # Import static web app if it exists
          if az staticwebapp show --name swa-microsite-staging --output none 2>/dev/null; then
            echo "Importing existing static web app..."
            SWA_ID=$(az staticwebapp show --name swa-microsite-staging --query id --output tsv)
            terraform import azurerm_static_web_app.StaticSite_StaticWebApp_88F2062B "$SWA_ID" || echo "Static web app already in state"
          fi
          
          # Import storage account if it exists (get the actual name from the plan)
          terraform plan -out=tfplan
          STORAGE_NAME=$(terraform show -json tfplan | jq -r '.planned_values.root_module.resources[] | select(.type == "azurerm_storage_account") | .values.name' 2>/dev/null || echo "")
          if [ ! -z "$STORAGE_NAME" ] && az storage account show --name "$STORAGE_NAME" --resource-group rg-microsite-staging --output none 2>/dev/null; then
            echo "Importing existing storage account: $STORAGE_NAME"
            STORAGE_ID="/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/rg-microsite-staging/providers/Microsoft.Storage/storageAccounts/$STORAGE_NAME"
            terraform import azurerm_storage_account.StaticSite_StorageAccount_DED9FEBA "$STORAGE_ID" || echo "Storage account already in state"
          fi
          
          # Apply the configuration
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Deploy Monitoring Infrastructure
        run: |
          cd terraform/stacks/monitoring-staging
          terraform init
          
          # Import existing resources if they exist
          echo "Checking for existing monitoring resources to import..."
          
          # Import resource group if it exists
          if az group show --name rg-monitoring-staging --output none 2>/dev/null; then
            echo "Importing existing monitoring resource group..."
            terraform import azurerm_resource_group.ResourceGroup /subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/rg-monitoring-staging || echo "Resource group already in state"
          fi
          
          # Import Application Insights if it exists
          if az monitor app-insights component show --app ai-microsite-staging --resource-group rg-monitoring-staging --output none 2>/dev/null; then
            echo "Importing existing Application Insights..."
            AI_ID=$(az monitor app-insights component show --app ai-microsite-staging --resource-group rg-monitoring-staging --query id --output tsv)
            terraform import azurerm_application_insights.Monitoring_ApplicationInsights_B682F62A "$AI_ID" || echo "Application Insights already in state"
          fi
          
          # Import Log Analytics workspace if it exists
          if az monitor log-analytics workspace show --workspace-name law-microsite-staging --resource-group rg-monitoring-staging --output none 2>/dev/null; then
            echo "Importing existing Log Analytics workspace..."
            LAW_ID=$(az monitor log-analytics workspace show --workspace-name law-microsite-staging --resource-group rg-monitoring-staging --query id --output tsv)
            terraform import azurerm_log_analytics_workspace.Monitoring_LogAnalyticsWorkspace_CA05C32D "$LAW_ID" || echo "Log Analytics workspace already in state"
          fi
          
          # Import Key Vault if it exists (get the actual name from the plan)
          terraform plan -out=tfplan
          KV_NAME=$(terraform show -json tfplan | jq -r '.planned_values.root_module.resources[] | select(.type == "azurerm_key_vault") | .values.name' 2>/dev/null || echo "")
          if [ ! -z "$KV_NAME" ] && az keyvault show --name "$KV_NAME" --resource-group rg-monitoring-staging --output none 2>/dev/null; then
            echo "Importing existing Key Vault: $KV_NAME"
            KV_ID="/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/rg-monitoring-staging/providers/Microsoft.KeyVault/vaults/$KV_NAME"
            terraform import azurerm_key_vault.Monitoring_KeyVault_20EA9E27 "$KV_ID" || echo "Key Vault already in state"
          fi
          
          # Apply the configuration
          terraform plan -out=tfplan
          terraform apply -auto-approve tfplan

      - name: Get Static Web App Deployment Token
        id: swa-token
        run: |
          # Get deployment token from Terraform output
          cd terraform/stacks/microsite-staging
          echo "token=$(terraform output -raw static-web-app-api-key)" >> $GITHUB_OUTPUT

      - name: Get Application Insights Connection String
        id: get-appinsights
        run: |
          # Get Application Insights connection string from monitoring stack
          cd terraform/stacks/monitoring-staging
          echo "connection_string=$(terraform output -raw application-insights-connection-string)" >> $GITHUB_OUTPUT

      - name: Configure Application Insights
        run: |
          # Configure Application Insights in the website
          export APPLICATIONINSIGHTS_CONNECTION_STRING="${{ steps.get-appinsights.outputs.connection_string }}"
          npm run configure:appinsights

      - name: Deploy Website to Azure Static Web Apps
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.swa-token.outputs.token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "dist/website"
          api_location: ""
          output_location: ""
        env:
          # Pass Application Insights connection string to the deployment
          APPLICATIONINSIGHTS_CONNECTION_STRING: ${{ steps.get-appinsights.outputs.connection_string }}

      - name: Run Health Checks
        run: |
          # Wait for deployment to be ready
          sleep 60
          
          # Get the staging URL
          cd terraform/stacks/microsite-staging
          STAGING_URL=$(terraform output -raw static-web-app-url)
          
          echo "Running health checks against: $STAGING_URL"
          
          # Basic health check
          if curl -f -s "$STAGING_URL" > /dev/null; then
            echo "✅ Site is accessible"
          else
            echo "❌ Site is not accessible"
            exit 1
          fi
          
          # Performance check (basic)
          LOAD_TIME=$(curl -o /dev/null -s -w "%{time_total}" "$STAGING_URL")
          echo "Load time: ${LOAD_TIME}s"
          
          if (( $(echo "$LOAD_TIME < 3.0" | bc -l) )); then
            echo "✅ Performance check passed"
          else
            echo "⚠️ Performance check warning: Load time > 3s"
          fi

      - name: Run Integration tests
        run:
          echo "Running Integration tests"
          #TODO: Add integration tests based on business logic and trigger them here

      - name: Update Deployment Status
        if: always()
        run: |
          STATUS="${{ job.status }}"
          echo "Deployment to staging: $STATUS"
          
          # This would integrate with monitoring/notification systems
          # For example, posting to Slack, Teams, or updating a dashboard

  # Deploy to production with approval
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Generate CDK configuration
        run: |
          npx cdktf get
          npx cdktf synth --output terraform/

      - name: Download Website Artifacts
        uses: actions/download-artifact@v4
        with:
          name: website-production
          path: dist/website/

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }

      - name: Deploy Infrastructure
        run: |
          cd terraform/stacks/microsite-production
          terraform init
          
          # Import existing resources if they exist
          echo "Checking for existing resources to import..."
          
          # Import resource group if it exists
          if az group show --name rg-microsite-production --output none 2>/dev/null; then
            echo "Importing existing resource group..."
            terraform import azurerm_resource_group.ResourceGroup /subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/rg-microsite-production 2>/dev/null || echo "Resource group already in state or import failed"
          fi
          
          # Run terraform plan first to see what resources it wants to create
          terraform plan -out=tfplan
          
          # Import static web app if it exists and Terraform wants to create it
          if az staticwebapp show --name swa-microsite-production --output none 2>/dev/null; then
            if terraform show -json tfplan | grep -q "swa-microsite-production"; then
              echo "Importing existing static web app..."
              SWA_ID=$(az staticwebapp show --name swa-microsite-production --query id --output tsv)
              # Find the resource address from the plan
              SWA_RESOURCE=$(terraform show -json tfplan | jq -r '.planned_values.root_module.resources[] | select(.type == "azurerm_static_web_app" and .values.name == "swa-microsite-production") | .address')
              if [ ! -z "$SWA_RESOURCE" ] && [ "$SWA_RESOURCE" != "null" ]; then
                terraform import "$SWA_RESOURCE" "$SWA_ID" || echo "Static web app import failed"
                # Re-plan after import
                terraform plan -out=tfplan
              fi
            fi
          fi
          
          # Import storage account if it exists and Terraform wants to create it
          STORAGE_ACCOUNTS=$(az storage account list --resource-group rg-microsite-production --query "[?starts_with(name, 'stmsprod')].name" --output tsv 2>/dev/null || echo "")
          if [ ! -z "$STORAGE_ACCOUNTS" ]; then
            for STORAGE_NAME in $STORAGE_ACCOUNTS; do
              if terraform show -json tfplan | grep -q "$STORAGE_NAME"; then
                echo "Importing existing storage account: $STORAGE_NAME"
                STORAGE_ID="/subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/rg-microsite-production/providers/Microsoft.Storage/storageAccounts/$STORAGE_NAME"
                # Find the resource address from the plan
                STORAGE_RESOURCE=$(terraform show -json tfplan | jq -r --arg name "$STORAGE_NAME" '.planned_values.root_module.resources[] | select(.type == "azurerm_storage_account" and .values.name == $name) | .address')
                if [ ! -z "$STORAGE_RESOURCE" ] && [ "$STORAGE_RESOURCE" != "null" ]; then
                  terraform import "$STORAGE_RESOURCE" "$STORAGE_ID" || echo "Storage account import failed"
                  # Re-plan after import
                  terraform plan -out=tfplan
                fi
              fi
            done
          fi
          
          terraform apply -auto-approve tfplan

      - name: Deploy Monitoring Infrastructure
        run: |
          cd terraform/stacks/monitoring-production
          terraform init
          
          # Import existing resources if they exist
          echo "Checking for existing monitoring resources to import..."
          
          # Import resource group if it exists
          if az group show --name rg-monitoring-production --output none 2>/dev/null; then
            echo "Importing existing monitoring resource group..."
            terraform import azurerm_resource_group.ResourceGroup /subscriptions/${{ secrets.ARM_SUBSCRIPTION_ID }}/resourceGroups/rg-monitoring-production 2>/dev/null || echo "Resource group already in state or import failed"
          fi
          
          # Run terraform plan first to see what resources it wants to create
          terraform plan -out=tfplan
          
          # Import Application Insights if it exists and Terraform wants to create it
          if az monitor app-insights component show --app ai-microsite-production --resource-group rg-monitoring-production --output none 2>/dev/null; then
            if terraform show -json tfplan | grep -q "ai-microsite-production"; then
              echo "Importing existing Application Insights..."
              AI_ID=$(az monitor app-insights component show --app ai-microsite-production --resource-group rg-monitoring-production --query id --output tsv)
              # Find the resource address from the plan
              AI_RESOURCE=$(terraform show -json tfplan | jq -r '.planned_values.root_module.resources[] | select(.type == "azurerm_application_insights" and .values.name == "ai-microsite-production") | .address')
              if [ ! -z "$AI_RESOURCE" ] && [ "$AI_RESOURCE" != "null" ]; then
                terraform import "$AI_RESOURCE" "$AI_ID" || echo "Application Insights import failed"
                # Re-plan after import
                terraform plan -out=tfplan
              fi
            fi
          fi
          
          # Import Log Analytics workspace if it exists and Terraform wants to create it
          if az monitor log-analytics workspace show --workspace-name law-microsite-production --resource-group rg-monitoring-production --output none 2>/dev/null; then
            if terraform show -json tfplan | grep -q "law-microsite-production"; then
              echo "Importing existing Log Analytics workspace..."
              LAW_ID=$(az monitor log-analytics workspace show --workspace-name law-microsite-production --resource-group rg-monitoring-production --query id --output tsv)
              # Find the resource address from the plan
              LAW_RESOURCE=$(terraform show -json tfplan | jq -r '.planned_values.root_module.resources[] | select(.type == "azurerm_log_analytics_workspace" and .values.name == "law-microsite-production") | .address')
              if [ ! -z "$LAW_RESOURCE" ] && [ "$LAW_RESOURCE" != "null" ]; then
                terraform import "$LAW_RESOURCE" "$LAW_ID" || echo "Log Analytics workspace import failed"
                # Re-plan after import
                terraform plan -out=tfplan
              fi
            fi
          fi
          
          terraform apply -auto-approve tfplan

      - name: Get Static Web App Deployment Token
        id: swa-token
        run: |
          cd terraform/stacks/microsite-production
          echo "token=$(terraform output -raw static-web-app-api-key)" >> $GITHUB_OUTPUT

      - name: Get Application Insights Connection String
        id: get-appinsights
        run: |
          # Get Application Insights connection string from monitoring stack
          cd terraform/stacks/monitoring-production
          echo "connection_string=$(terraform output -raw application-insights-connection-string)" >> $GITHUB_OUTPUT

      - name: Configure Application Insights
        run: |
          # Configure Application Insights in the website
          export APPLICATIONINSIGHTS_CONNECTION_STRING="${{ steps.get-appinsights.outputs.connection_string }}"
          npm run configure:appinsights

      - name: Deploy Website to Azure Static Web Apps
        id: deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ steps.swa-token.outputs.token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "dist/website"
          api_location: ""
          output_location: ""
        env:
          # Pass Application Insights connection string to the deployment
          APPLICATIONINSIGHTS_CONNECTION_STRING: ${{ steps.get-appinsights.outputs.connection_string }}
          output_location: ""

      - name: Get Production URL
        id: prod-url
        run: |
          cd terraform/stacks/microsite-production
          PROD_URL=$(terraform output -raw static-web-app-url)
          echo "url=$PROD_URL" >> $GITHUB_OUTPUT
          echo "Production URL: $PROD_URL"

      - name: Run Production Health Checks
        run: |
          PROD_URL="${{ steps.prod-url.outputs.url }}"
          
          echo "Running comprehensive health checks against: $PROD_URL"
          
          # Wait for CDN propagation
          sleep 120
          
          # Basic availability check
          for i in {1..5}; do
            if curl -f -s "$PROD_URL" > /dev/null; then
              echo "✅ Availability check $i/5 passed"
            else
              echo "❌ Availability check $i/5 failed"
              if [ $i -eq 5 ]; then exit 1; fi
            fi
            sleep 30
          done
          
          # Performance check
          LOAD_TIME=$(curl -o /dev/null -s -w "%{time_total}" "$PROD_URL")
          echo "Load time: ${LOAD_TIME}s"
          
          # Security headers check
          echo "Checking security headers..."
          HEADERS=$(curl -s -I "$PROD_URL")
          
          if echo "$HEADERS" | grep -q "X-Content-Type-Options"; then
            echo "✅ X-Content-Type-Options header present"
          else
            echo "⚠️ X-Content-Type-Options header missing"
          fi
          
          if echo "$HEADERS" | grep -q "X-Frame-Options"; then
            echo "✅ X-Frame-Options header present"
          else
            echo "⚠️ X-Frame-Options header missing"
          fi

      - name: Update monitoring dashboards
        run: |
          echo "Updating monitoring dashboards and alerts"
          # This would integrate with Azure Monitor, Application Insights, etc.
          # to update dashboards and ensure alerts are active

      - name: Post-deployment notification
        if: always()
        run: |
          STATUS="${{ job.status }}"
          URL="${{ steps.prod-url.outputs.url }}"
          
          echo "🚀 Production deployment completed with status: $STATUS"
          echo "🌍 Live URL: $URL"
          
          # This would send notifications to Slack, Teams, email, etc.
          # Example:
          # curl -X POST "$SLACK_WEBHOOK" -d "{\"text\":\"Production deployment $STATUS: $URL\"}"

  # TODO: This is an empty template for now, 
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
      - name: Setup monitoring checks
        run: |
          echo "Setting up enhanced monitoring for the next 24 hours"

      - name: Performance baseline
        run: |
          echo "Establishing performance baseline"
          # Run comprehensive performance tests

      - name: Monitor for 30 minutes
        run: |
          echo "Monitoring deployment for 30 minutes..."
            # TODO: Add trackers for alerts and auto rollback Prod deployment in the event of an alert firing
            sleep 300 # 5 minutes for now
          done
          
          echo "✅ 30-minute monitoring completed successfully"
